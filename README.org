#+TITLE: Project README

This is a fun project for playing around with my strava data.

* Overview
The idea here is to create a lightweight way to track maintenance. I want to limit external dependencies and basically just get the minimum info from the activities and log it, with the ability then to see wear and tear by part, last time various maintenance tasks were performed, etc. 


* Installation/Usage Requirements
** Python requirements
Until this is bundled into a standalone binary, the following python libraries are required:
- =stravalib=
- =PyQt5=
- =numpy=
- =pandas=
- =input-form-dialog= (see more below)

*** Input-form-dialog
This package is out of date and will not work with python3.x. If you are building or running the stravaDB app from source, you should also build this package from source:

#+begin_src bash
cd ~/.config
git clone https://github.com/bapfeld/input-form-dialog.git
cd input-form-dialog
python3 setup.py sdist bdist_wheel
pip3 install --user dist/input_form_dialog-1.0.1-py3-none-any.whl
#+end_src

** Strava API
The first step is to create an "app" with strava in order to access the API. Go to [[https://www.strava.com/settings/api][https://www.strava.com/settings/api]] and follow the directions for creating an application. Choose any name you want and set the callback domain to =localhost=. You'll need the client id and client secret later in this process.

You will also need to get a special authorization code for your application. Assuming you've already installed stravalib, run the following code (replacing the client_id with your application's client_id), then paste the url it generates into a browser and hit enter. This will "fail" in that you'll end up with an angry looking webpage. You need to grab the "code" parameter from within the url of the page that loads --- the url should contain something like =?code=StringOfNumbersAndLetters=. 

#+BEGIN_EXAMPLE python
  from stravalib.client import Client

  client= Client()

  url = client.authorization_url(client_id=YourClientID,
                                 redirect_uri='http://127.0.0.1:5000/authorization')
  url
#+END_EXAMPLE

** Secrets!
The application will attempt to use your machine's keyring to store the client credentials. You will be prompted to enter these (from the previous step) the first time you launch the application.


